
SPIMASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a00  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af9  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166b  00000000  00000000  00002c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  000042d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e4e  00000000  00000000  0000460c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f48  00000000  00000000  0000945a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000a3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001907  00000000  00000000  0000a502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	07 c2       	rjmp	.+1038   	; 0x440 <__vector_12>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	30 c2       	rjmp	.+1120   	; 0x4ea <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
u8 readKeypad;
u8 readSPI;

int main()
{
	DIO_init();
  8c:	20 d1       	rcall	.+576    	; 0x2ce <DIO_init>
	KEYPAD_INIT();
  8e:	1b d0       	rcall	.+54     	; 0xc6 <KEYPAD_INIT>
	LCD_INIT();
  90:	87 d0       	rcall	.+270    	; 0x1a0 <LCD_INIT>
  92:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	84 e3       	ldi	r24, 0x34	; 52
  96:	9c e0       	ldi	r25, 0x0C	; 12
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x16>
  a2:	00 00       	nop
	_delay_ms(500);
	SPI_MASTER_INIT();
  a4:	be d1       	rcall	.+892    	; 0x422 <SPI_MASTER_INIT>
	UART_init(9600);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	95 e2       	ldi	r25, 0x25	; 37
	UART_RX_ENABLE();
  aa:	f3 d1       	rcall	.+998    	; 0x492 <UART_init>
  ac:	18 d2       	rcall	.+1072   	; 0x4de <UART_RX_ENABLE>
	
	
	while(1)
	{
		
		returnValu = USART_Receive();
  ae:	19 d2       	rcall	.+1074   	; 0x4e2 <USART_Receive>
  b0:	c8 2f       	mov	r28, r24
		LCD_write_char(returnValu);
  b2:	ad d0       	rcall	.+346    	; 0x20e <LCD_write_char>
  b4:	40 e0       	ldi	r20, 0x00	; 0
		//chip select
		DIO_SetPinVal(PB,4,0);
  b6:	64 e0       	ldi	r22, 0x04	; 4
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	12 d1       	rcall	.+548    	; 0x2e0 <DIO_SetPinVal>
  bc:	8c 2f       	mov	r24, r28
  be:	bb d1       	rcall	.+886    	; 0x436 <SPI_u8Transfer>
		readSPI = SPI_u8Transfer(returnValu);
  c0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <readSPI>
  c4:	f4 cf       	rjmp	.-24     	; 0xae <main+0x22>

000000c6 <KEYPAD_INIT>:

u8 arr[4][4] = { {'7','8','9','/'},  {'4','5','6','*'}, {'1','2','3','-'}, {'A','0','=','+'}};

void KEYPAD_INIT()
{
	DIO_EN_PULLUP(COLS_PORT, COL1);
  c6:	67 e0       	ldi	r22, 0x07	; 7
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	77 d1       	rcall	.+750    	; 0x3ba <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL2);
  cc:	66 e0       	ldi	r22, 0x06	; 6
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	74 d1       	rcall	.+744    	; 0x3ba <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL3);
  d2:	65 e0       	ldi	r22, 0x05	; 5
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	71 d1       	rcall	.+738    	; 0x3ba <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL4);
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	6e c1       	rjmp	.+732    	; 0x3ba <DIO_EN_PULLUP>
  de:	08 95       	ret

000000e0 <LCD_instruction>:
  e0:	cf 93       	push	r28
	DIO_SetPinVal(ENPORT, ENPIN, LOW);
	_delay_ms(2);
}

void LCD_instruction(unsigned char cmnd)
{
  e2:	c8 2f       	mov	r28, r24
	
	//4bit mode
	DIO_SetPinVal(RSPORT, RSPIN, 0);	
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	fa d0       	rcall	.+500    	; 0x2e0 <DIO_SetPinVal>
	//LCD_PORT = (LCD_PORT & 0x0F) | (cmnd & 0xF0);
		DIO_SetPinVal(LCD_PORT, LCD_D4, READ_BIT(cmnd,4));
  ec:	c4 fb       	bst	r28, 4
  ee:	44 27       	eor	r20, r20
  f0:	40 f9       	bld	r20, 0
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	f4 d0       	rcall	.+488    	; 0x2e0 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_PORT, LCD_D5, READ_BIT(cmnd,5));
  f8:	c5 fb       	bst	r28, 5
  fa:	44 27       	eor	r20, r20
  fc:	40 f9       	bld	r20, 0
  fe:	65 e0       	ldi	r22, 0x05	; 5
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	ee d0       	rcall	.+476    	; 0x2e0 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_PORT, LCD_D6, READ_BIT(cmnd,6));
 104:	c6 fb       	bst	r28, 6
 106:	44 27       	eor	r20, r20
 108:	40 f9       	bld	r20, 0
 10a:	66 e0       	ldi	r22, 0x06	; 6
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	e8 d0       	rcall	.+464    	; 0x2e0 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_PORT, LCD_D7, READ_BIT(cmnd,7));
 110:	4c 2f       	mov	r20, r28
 112:	44 1f       	adc	r20, r20
 114:	44 27       	eor	r20, r20
 116:	44 1f       	adc	r20, r20
 118:	67 e0       	ldi	r22, 0x07	; 7
 11a:	82 e0       	ldi	r24, 0x02	; 2
	
	DIO_SetPinVal(ENPORT, ENPIN, 1);
 11c:	e1 d0       	rcall	.+450    	; 0x2e0 <DIO_SetPinVal>
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	66 e0       	ldi	r22, 0x06	; 6
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	dd d0       	rcall	.+442    	; 0x2e0 <DIO_SetPinVal>
 126:	83 ef       	ldi	r24, 0xF3	; 243
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_instruction+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_instruction+0x50>
	_delay_ms(2);		
	DIO_SetPinVal(ENPORT, ENPIN, 0);
 130:	00 00       	nop
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	66 e0       	ldi	r22, 0x06	; 6
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	d3 d0       	rcall	.+422    	; 0x2e0 <DIO_SetPinVal>
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_instruction+0x5e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_instruction+0x64>
	_delay_ms(2);


	//LCD_PORT = (LCD_PORT & 0x0F) | (cmnd << 4);
	DIO_SetPinVal(LCD_PORT, LCD_D4, READ_BIT(cmnd,0));
 144:	00 00       	nop
 146:	4c 2f       	mov	r20, r28
 148:	41 70       	andi	r20, 0x01	; 1
 14a:	64 e0       	ldi	r22, 0x04	; 4
 14c:	82 e0       	ldi	r24, 0x02	; 2
	DIO_SetPinVal(LCD_PORT, LCD_D5, READ_BIT(cmnd,1));
 14e:	c8 d0       	rcall	.+400    	; 0x2e0 <DIO_SetPinVal>
 150:	c1 fb       	bst	r28, 1
 152:	44 27       	eor	r20, r20
 154:	40 f9       	bld	r20, 0
 156:	65 e0       	ldi	r22, 0x05	; 5
 158:	82 e0       	ldi	r24, 0x02	; 2
	DIO_SetPinVal(LCD_PORT, LCD_D6, READ_BIT(cmnd,2));
 15a:	c2 d0       	rcall	.+388    	; 0x2e0 <DIO_SetPinVal>
 15c:	c2 fb       	bst	r28, 2
 15e:	44 27       	eor	r20, r20
 160:	40 f9       	bld	r20, 0
 162:	66 e0       	ldi	r22, 0x06	; 6
 164:	82 e0       	ldi	r24, 0x02	; 2
	DIO_SetPinVal(LCD_PORT, LCD_D7, READ_BIT(cmnd,3));
 166:	bc d0       	rcall	.+376    	; 0x2e0 <DIO_SetPinVal>
 168:	c3 fb       	bst	r28, 3
 16a:	44 27       	eor	r20, r20
 16c:	40 f9       	bld	r20, 0
 16e:	67 e0       	ldi	r22, 0x07	; 7
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	b6 d0       	rcall	.+364    	; 0x2e0 <DIO_SetPinVal>
	//LCD_PORT &= ~ (1<<RSPIN);	
	DIO_SetPinVal(ENPORT, ENPIN, 1);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	66 e0       	ldi	r22, 0x06	; 6
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	b2 d0       	rcall	.+356    	; 0x2e0 <DIO_SetPinVal>
 17c:	83 ef       	ldi	r24, 0xF3	; 243
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_instruction+0xa0>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_instruction+0xa6>
 186:	00 00       	nop
	_delay_ms(2);
	DIO_SetPinVal(ENPORT, ENPIN, 0);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	66 e0       	ldi	r22, 0x06	; 6
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	a8 d0       	rcall	.+336    	; 0x2e0 <DIO_SetPinVal>
 190:	83 ef       	ldi	r24, 0xF3	; 243
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_instruction+0xb4>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_instruction+0xba>
 19a:	00 00       	nop
 19c:	cf 91       	pop	r28
	_delay_ms(2);
	
}
 19e:	08 95       	ret

000001a0 <LCD_INIT>:
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	97 e2       	ldi	r25, 0x27	; 39
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_INIT+0x4>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_INIT+0xa>
 1aa:	00 00       	nop

void LCD_INIT()
{
	
	_delay_ms(40);
	LCD_instruction(0x33);
 1ac:	83 e3       	ldi	r24, 0x33	; 51
 1ae:	98 df       	rcall	.-208    	; 0xe0 <LCD_instruction>
 1b0:	89 ef       	ldi	r24, 0xF9	; 249
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_INIT+0x14>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_INIT+0x1a>
 1ba:	00 00       	nop
	_delay_ms(1);
	LCD_instruction(0x32);
 1bc:	82 e3       	ldi	r24, 0x32	; 50
 1be:	90 df       	rcall	.-224    	; 0xe0 <LCD_instruction>
 1c0:	89 ef       	ldi	r24, 0xF9	; 249
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_INIT+0x24>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_INIT+0x2a>
	_delay_ms(1);
	//function set
	LCD_instruction(FOUR_BIT_MODE);//0x28
 1ca:	00 00       	nop
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	88 df       	rcall	.-240    	; 0xe0 <LCD_instruction>
 1d0:	89 ef       	ldi	r24, 0xF9	; 249
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_INIT+0x34>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_INIT+0x3a>
	_delay_ms(1);
	LCD_instruction(0x0c);
 1da:	00 00       	nop
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	80 df       	rcall	.-256    	; 0xe0 <LCD_instruction>
 1e0:	89 ef       	ldi	r24, 0xF9	; 249
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_INIT+0x44>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_INIT+0x4a>
	_delay_ms(1);
	LCD_instruction(CLEAR_DISPLAY);//0x01
 1ea:	00 00       	nop
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	78 df       	rcall	.-272    	; 0xe0 <LCD_instruction>
 1f0:	89 ef       	ldi	r24, 0xF9	; 249
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_INIT+0x54>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_INIT+0x5a>
	_delay_ms(1);
	LCD_instruction(RETURN_HOME); // 0x02
 1fa:	00 00       	nop
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	70 df       	rcall	.-288    	; 0xe0 <LCD_instruction>
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_INIT+0x64>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_INIT+0x6a>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <LCD_write_char>:
	_delay_ms(2);
	
}

void LCD_write_char(unsigned char data)
{
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
	
	//For 4-Bit Mode
	DIO_SetPinVal(RSPORT, RSPIN, 1);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	63 d0       	rcall	.+198    	; 0x2e0 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_PORT, LCD_D4, READ_BIT(data,4));
 21a:	c4 fb       	bst	r28, 4
 21c:	44 27       	eor	r20, r20
 21e:	40 f9       	bld	r20, 0
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	5d d0       	rcall	.+186    	; 0x2e0 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_PORT, LCD_D5, READ_BIT(data,5));
 226:	c5 fb       	bst	r28, 5
 228:	44 27       	eor	r20, r20
 22a:	40 f9       	bld	r20, 0
 22c:	65 e0       	ldi	r22, 0x05	; 5
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	57 d0       	rcall	.+174    	; 0x2e0 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_PORT, LCD_D6, READ_BIT(data,6));
 232:	c6 fb       	bst	r28, 6
 234:	44 27       	eor	r20, r20
 236:	40 f9       	bld	r20, 0
 238:	66 e0       	ldi	r22, 0x06	; 6
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	51 d0       	rcall	.+162    	; 0x2e0 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_PORT, LCD_D7, READ_BIT(data,7));
 23e:	4c 2f       	mov	r20, r28
 240:	44 1f       	adc	r20, r20
 242:	44 27       	eor	r20, r20
 244:	44 1f       	adc	r20, r20
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	82 e0       	ldi	r24, 0x02	; 2
	
	DIO_SetPinVal(ENPORT, ENPIN, 1);
 24a:	4a d0       	rcall	.+148    	; 0x2e0 <DIO_SetPinVal>
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	66 e0       	ldi	r22, 0x06	; 6
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	46 d0       	rcall	.+140    	; 0x2e0 <DIO_SetPinVal>
 254:	83 ef       	ldi	r24, 0xF3	; 243
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_write_char+0x4a>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_write_char+0x50>
	_delay_ms(2);
	DIO_SetPinVal(ENPORT, ENPIN, 0);
 25e:	00 00       	nop
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	66 e0       	ldi	r22, 0x06	; 6
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	3c d0       	rcall	.+120    	; 0x2e0 <DIO_SetPinVal>
 268:	83 ef       	ldi	r24, 0xF3	; 243
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_write_char+0x5e>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_write_char+0x64>
	_delay_ms(2);

	//LCD_PORT = (LCD_PORT & 0x0F) | (data << 4); 
	DIO_SetPinVal(LCD_PORT, LCD_D4, READ_BIT(data,0));
 272:	00 00       	nop
 274:	4c 2f       	mov	r20, r28
 276:	41 70       	andi	r20, 0x01	; 1
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	82 e0       	ldi	r24, 0x02	; 2
	DIO_SetPinVal(LCD_PORT, LCD_D5, READ_BIT(data,1));
 27c:	31 d0       	rcall	.+98     	; 0x2e0 <DIO_SetPinVal>
 27e:	c1 fb       	bst	r28, 1
 280:	44 27       	eor	r20, r20
 282:	40 f9       	bld	r20, 0
 284:	65 e0       	ldi	r22, 0x05	; 5
 286:	82 e0       	ldi	r24, 0x02	; 2
	DIO_SetPinVal(LCD_PORT, LCD_D6, READ_BIT(data,2));
 288:	2b d0       	rcall	.+86     	; 0x2e0 <DIO_SetPinVal>
 28a:	c2 fb       	bst	r28, 2
 28c:	44 27       	eor	r20, r20
 28e:	40 f9       	bld	r20, 0
 290:	66 e0       	ldi	r22, 0x06	; 6
 292:	82 e0       	ldi	r24, 0x02	; 2
	DIO_SetPinVal(LCD_PORT, LCD_D7, READ_BIT(data,3));
 294:	25 d0       	rcall	.+74     	; 0x2e0 <DIO_SetPinVal>
 296:	c3 fb       	bst	r28, 3
 298:	44 27       	eor	r20, r20
 29a:	40 f9       	bld	r20, 0
 29c:	67 e0       	ldi	r22, 0x07	; 7
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	1f d0       	rcall	.+62     	; 0x2e0 <DIO_SetPinVal>
	
	DIO_SetPinVal(ENPORT, ENPIN, 1);
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	66 e0       	ldi	r22, 0x06	; 6
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	1b d0       	rcall	.+54     	; 0x2e0 <DIO_SetPinVal>
 2aa:	83 ef       	ldi	r24, 0xF3	; 243
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_write_char+0xa0>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_write_char+0xa6>
 2b4:	00 00       	nop
	_delay_ms(2);
	DIO_SetPinVal(ENPORT, ENPIN, 0);
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	66 e0       	ldi	r22, 0x06	; 6
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	11 d0       	rcall	.+34     	; 0x2e0 <DIO_SetPinVal>
 2be:	83 ef       	ldi	r24, 0xF3	; 243
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_write_char+0xb4>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_write_char+0xba>
 2c8:	00 00       	nop
 2ca:	cf 91       	pop	r28
	_delay_ms(2);
	
}
 2cc:	08 95       	ret

000002ce <DIO_init>:
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
				break;
		case PC:
				TOG_BIT(PORTC, pinNum);		
				break;
		case PD:
				TOG_BIT(PORTD, pinNum);	
 2d0:	8a bb       	out	0x1a, r24	; 26
 2d2:	8f eb       	ldi	r24, 0xBF	; 191
 2d4:	87 bb       	out	0x17, r24	; 23
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	84 bb       	out	0x14, r24	; 20
 2da:	8e ef       	ldi	r24, 0xFE	; 254
 2dc:	81 bb       	out	0x11, r24	; 17
 2de:	08 95       	ret

000002e0 <DIO_SetPinVal>:
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	01 f1       	breq	.+64     	; 0x324 <DIO_SetPinVal+0x44>
 2e4:	30 f0       	brcs	.+12     	; 0x2f2 <DIO_SetPinVal+0x12>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	b1 f1       	breq	.+108    	; 0x356 <DIO_SetPinVal+0x76>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <DIO_SetPinVal+0x10>
 2ee:	4c c0       	rjmp	.+152    	; 0x388 <DIO_SetPinVal+0xa8>
 2f0:	08 95       	ret
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	59 f4       	brne	.+22     	; 0x30c <DIO_SetPinVal+0x2c>
 2f6:	2b b3       	in	r18, 0x1b	; 27
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_SetPinVal+0x22>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_SetPinVal+0x1e>
 306:	82 2b       	or	r24, r18
 308:	8b bb       	out	0x1b, r24	; 27
 30a:	08 95       	ret
 30c:	2b b3       	in	r18, 0x1b	; 27
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPinVal+0x38>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_SetPinVal+0x34>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	8b bb       	out	0x1b, r24	; 27
 322:	08 95       	ret
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	59 f4       	brne	.+22     	; 0x33e <DIO_SetPinVal+0x5e>
 328:	28 b3       	in	r18, 0x18	; 24
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_SetPinVal+0x54>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_SetPinVal+0x50>
 338:	82 2b       	or	r24, r18
 33a:	88 bb       	out	0x18, r24	; 24
 33c:	08 95       	ret
 33e:	28 b3       	in	r18, 0x18	; 24
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_SetPinVal+0x6a>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_SetPinVal+0x66>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	88 bb       	out	0x18, r24	; 24
 354:	08 95       	ret
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_SetPinVal+0x90>
 35a:	25 b3       	in	r18, 0x15	; 21
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinVal+0x86>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinVal+0x82>
 36a:	82 2b       	or	r24, r18
 36c:	85 bb       	out	0x15, r24	; 21
 36e:	08 95       	ret
 370:	25 b3       	in	r18, 0x15	; 21
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_SetPinVal+0x9c>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_SetPinVal+0x98>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	85 bb       	out	0x15, r24	; 21
 386:	08 95       	ret
 388:	41 30       	cpi	r20, 0x01	; 1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <DIO_SetPinVal+0xc2>
 38c:	22 b3       	in	r18, 0x12	; 18
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_SetPinVal+0xb8>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_SetPinVal+0xb4>
 39c:	82 2b       	or	r24, r18
 39e:	82 bb       	out	0x12, r24	; 18
 3a0:	08 95       	ret
 3a2:	22 b3       	in	r18, 0x12	; 18
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinVal+0xce>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinVal+0xca>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	82 bb       	out	0x12, r24	; 18
 3b8:	08 95       	ret

000003ba <DIO_EN_PULLUP>:
	}
}

void DIO_EN_PULLUP(u8 portName, u8 pinNum)
{
	switch(portName)
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	89 f0       	breq	.+34     	; 0x3e0 <DIO_EN_PULLUP+0x26>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <DIO_EN_PULLUP+0x10>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	c9 f0       	breq	.+50     	; 0x3f6 <DIO_EN_PULLUP+0x3c>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	11 f1       	breq	.+68     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3c8:	08 95       	ret
	{
		case PA:
				SET_BIT(PINA, pinNum);	
 3ca:	29 b3       	in	r18, 0x19	; 25
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_EN_PULLUP+0x1c>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_EN_PULLUP+0x18>
 3da:	82 2b       	or	r24, r18
 3dc:	89 bb       	out	0x19, r24	; 25
				break;
 3de:	08 95       	ret
		case PB:
				SET_BIT(PINB, pinNum);	
 3e0:	26 b3       	in	r18, 0x16	; 22
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_EN_PULLUP+0x32>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_EN_PULLUP+0x2e>
 3f0:	82 2b       	or	r24, r18
 3f2:	86 bb       	out	0x16, r24	; 22
				break;
 3f4:	08 95       	ret
		case PC:
				SET_BIT(PINC, pinNum);	
 3f6:	23 b3       	in	r18, 0x13	; 19
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_EN_PULLUP+0x44>
 406:	82 2b       	or	r24, r18
 408:	83 bb       	out	0x13, r24	; 19
				break;
 40a:	08 95       	ret
		case PD:
				SET_BIT(PIND, pinNum);	
 40c:	20 b3       	in	r18, 0x10	; 16
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	82 2b       	or	r24, r18
 41e:	80 bb       	out	0x10, r24	; 16
 420:	08 95       	ret

00000422 <SPI_MASTER_INIT>:
	SPDR = Copy_Data;
}

void SPI_voidSetCallBack( void (*PtrToFunc) (void) )
{
	SPICallbackFunc = PtrToFunc;
 422:	6c 9a       	sbi	0x0d, 4	; 13
 424:	6f 9a       	sbi	0x0d, 7	; 13
 426:	6d 9a       	sbi	0x0d, 5	; 13
 428:	6b 98       	cbi	0x0d, 3	; 13
 42a:	6a 98       	cbi	0x0d, 2	; 13
 42c:	68 98       	cbi	0x0d, 0	; 13
 42e:	69 98       	cbi	0x0d, 1	; 13
 430:	70 9a       	sbi	0x0e, 0	; 14
 432:	6e 9a       	sbi	0x0d, 6	; 13
 434:	08 95       	ret

00000436 <SPI_u8Transfer>:
 436:	8f b9       	out	0x0f, r24	; 15
 438:	77 9b       	sbis	0x0e, 7	; 14
 43a:	fe cf       	rjmp	.-4      	; 0x438 <SPI_u8Transfer+0x2>
 43c:	8f b1       	in	r24, 0x0f	; 15
 43e:	08 95       	ret

00000440 <__vector_12>:
}

void __vector_12 (void) __attribute__ ((signal,used, externally_visible));
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
 462:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 466:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 46a:	30 97       	sbiw	r30, 0x00	; 0
 46c:	09 f0       	breq	.+2      	; 0x470 <__vector_12+0x30>
 46e:	09 95       	icall
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <UART_init>:
void USART_Transmit( u8 data )
{
	UDR = data;
	while(IS_BIT_CLR(UCSRA,TXC));
	//SET_BIT(UCSRA,TXC);	//this line used when Asynchrounous not synch.
}
 492:	80 b5       	in	r24, 0x20	; 32
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 bd       	out	0x20, r24	; 32
 498:	83 e3       	ldi	r24, 0x33	; 51
 49a:	89 b9       	out	0x09, r24	; 9
 49c:	80 b5       	in	r24, 0x20	; 32
 49e:	8f 77       	andi	r24, 0x7F	; 127
 4a0:	80 bd       	out	0x20, r24	; 32
 4a2:	80 b5       	in	r24, 0x20	; 32
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	80 bd       	out	0x20, r24	; 32
 4a8:	80 b5       	in	r24, 0x20	; 32
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	80 bd       	out	0x20, r24	; 32
 4ae:	52 98       	cbi	0x0a, 2	; 10
 4b0:	80 b5       	in	r24, 0x20	; 32
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	80 bd       	out	0x20, r24	; 32
 4b6:	53 9b       	sbis	0x0a, 3	; 10
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <UART_init+0x2e>
 4ba:	80 b5       	in	r24, 0x20	; 32
 4bc:	8e 7f       	andi	r24, 0xFE	; 254
 4be:	80 bd       	out	0x20, r24	; 32
 4c0:	54 9b       	sbis	0x0a, 4	; 10
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <UART_init+0x38>
 4c4:	80 b5       	in	r24, 0x20	; 32
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	80 bd       	out	0x20, r24	; 32
 4ca:	80 b5       	in	r24, 0x20	; 32
 4cc:	8f 7e       	andi	r24, 0xEF	; 239
 4ce:	80 bd       	out	0x20, r24	; 32
 4d0:	80 b5       	in	r24, 0x20	; 32
 4d2:	8f 7d       	andi	r24, 0xDF	; 223
 4d4:	80 bd       	out	0x20, r24	; 32
 4d6:	80 b5       	in	r24, 0x20	; 32
 4d8:	87 7f       	andi	r24, 0xF7	; 247
 4da:	80 bd       	out	0x20, r24	; 32
 4dc:	08 95       	ret

000004de <UART_RX_ENABLE>:
 4de:	54 9a       	sbi	0x0a, 4	; 10
 4e0:	08 95       	ret

000004e2 <USART_Receive>:


u8 USART_Receive( )
{
	
	while(IS_BIT_CLR(UCSRA,RXC));
 4e2:	5f 9b       	sbis	0x0b, 7	; 11
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <USART_Receive>
	return UDR;
 4e6:	8c b1       	in	r24, 0x0c	; 12
}
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
